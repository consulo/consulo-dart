/* The following code was generated by JFlex 1.4.3 on 3/31/13 1:31 PM */

package com.jetbrains.lang.dart;

import java.util.*;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import static com.jetbrains.lang.dart.DartTokenTypes.*;
import static com.jetbrains.lang.dart.DartTokenTypesSets.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 3/31/13 1:31 PM from the specification file
 * <tt>/Users/fedorkorotkov/workspaces/idea/plugins/Dart/src/com/jetbrains/lang/dart/Dart.flex</tt>
 */
class _DartLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int THREE_QUO_STRING = 4;
  public static final int THREE_APOS_STRING = 8;
  public static final int APOS_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int LONG_TEMPLATE_ENTRY = 12;
  public static final int QUO_STRING = 2;
  public static final int SHORT_TEMPLATE_ENTRY = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\1\0\1\3\1\5\22\0\1\3\1\64\1\13"+
    "\1\75\1\14\1\63\1\74\1\11\1\55\1\56\1\6\1\25\1\66"+
    "\1\60\1\26\1\4\1\16\11\1\1\67\1\57\1\70\1\61\1\65"+
    "\1\71\1\7\4\22\1\24\1\22\21\2\1\20\2\2\1\53\1\12"+
    "\1\54\1\73\1\2\1\0\1\31\1\30\1\33\1\43\1\23\1\21"+
    "\1\51\1\36\1\41\1\2\1\32\1\44\1\52\1\40\1\37\1\47"+
    "\1\2\1\10\1\34\1\35\1\42\1\50\1\46\1\17\1\45\1\2"+
    "\1\15\1\72\1\27\1\62\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\3\1\10\1\11\1\12\1\2\2\3\1\13\1\14"+
    "\1\15\17\3\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\0\1\42"+
    "\5\41\2\43\1\44\1\45\1\2\1\0\1\46\1\47"+
    "\1\50\1\51\2\52\1\3\2\0\1\2\5\3\1\53"+
    "\1\54\1\2\2\3\1\55\15\3\1\56\1\57\4\3"+
    "\1\60\1\61\1\62\2\3\1\63\6\3\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\0\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\2\0\1\43\1\2\1\46\1\105\1\47\1\105\6\52"+
    "\2\3\1\106\1\107\2\3\1\110\13\3\1\111\6\3"+
    "\1\112\5\3\1\113\12\3\1\114\1\115\1\116\1\117"+
    "\1\120\1\121\1\0\1\122\1\43\1\0\2\105\1\52"+
    "\2\123\7\3\1\124\3\3\1\125\5\3\1\126\3\3"+
    "\1\127\1\3\1\130\1\3\1\131\3\3\1\132\6\3"+
    "\1\133\1\134\1\135\1\136\1\47\5\0\3\3\1\137"+
    "\1\140\3\3\1\141\2\3\1\142\1\143\1\3\1\144"+
    "\2\3\1\145\1\3\1\146\11\3\1\147\1\0\2\123"+
    "\1\0\1\3\1\150\4\3\1\151\1\3\1\152\1\3"+
    "\1\153\1\154\1\155\2\3\1\156\1\157\1\3\1\160"+
    "\3\3\3\123\1\3\1\161\1\162\1\3\1\163\2\3"+
    "\1\164\3\3\1\165\1\166\2\0\1\167\1\170\1\171"+
    "\1\172\1\173\2\3\2\123\1\174\1\3\1\175";

  private static int [] zzUnpackAction() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\272\0\370\0\u0136\0\u0174\0\u01b2"+
    "\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8\0\u0326\0\u0364\0\u03a2"+
    "\0\u03e0\0\u01b2\0\u041e\0\u045c\0\u049a\0\u04d8\0\u0516\0\u01b2"+
    "\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8\0\u0706"+
    "\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u08f6\0\u0934\0\u0972\0\u09b0"+
    "\0\u09ee\0\u0a2c\0\u01b2\0\u01b2\0\u0a6a\0\u01b2\0\u0aa8\0\u0ae6"+
    "\0\u0b24\0\u01b2\0\u0b62\0\u0ba0\0\u01b2\0\u0bde\0\u01b2\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u01b2\0\u01b2\0\u0d52\0\u0516"+
    "\0\u0d90\0\u0dce\0\u01b2\0\u01b2\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6"+
    "\0\u0f04\0\u0f42\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u01b2"+
    "\0\u01b2\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae\0\u11ec\0\u122a"+
    "\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e\0\u13dc\0\u141a"+
    "\0\u1458\0\u1496\0\u022e\0\u022e\0\u14d4\0\u1512\0\u1550\0\u158e"+
    "\0\u022e\0\u022e\0\u15cc\0\u160a\0\u1648\0\u022e\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u17bc\0\u01b2\0\u01b2\0\u17fa\0\u01b2"+
    "\0\u1838\0\u01b2\0\u1876\0\u01b2\0\u18b4\0\u01b2\0\u18f2\0\u01b2"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u1930\0\u01b2\0\u196e\0\u19ac"+
    "\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c"+
    "\0\u1bda\0\u1c18\0\u1c56\0\u1c94\0\u1cd2\0\u1d10\0\u01b2\0\u01b2"+
    "\0\u1d4e\0\u1d8c\0\u022e\0\u1dca\0\u1e08\0\u1e46\0\u1e84\0\u1ec2"+
    "\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u022e\0\u2074"+
    "\0\u20b2\0\u20f0\0\u212e\0\u216c\0\u21aa\0\u022e\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u022e\0\u231e\0\u235c\0\u239a\0\u23d8"+
    "\0\u2416\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u022e\0\u022e"+
    "\0\u01b2\0\u01b2\0\u01b2\0\u01b2\0\u258a\0\u01b2\0\u25c8\0\u2606"+
    "\0\u2644\0\u01b2\0\u01b2\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a"+
    "\0\u27b8\0\u27f6\0\u2834\0\u2872\0\u022e\0\u28b0\0\u28ee\0\u292c"+
    "\0\u022e\0\u296a\0\u29a8\0\u29e6\0\u2a24\0\u2a62\0\u022e\0\u2aa0"+
    "\0\u2ade\0\u2b1c\0\u022e\0\u2b5a\0\u022e\0\u2b98\0\u022e\0\u2bd6"+
    "\0\u2c14\0\u2c52\0\u022e\0\u2c90\0\u2cce\0\u2d0c\0\u2d4a\0\u2d88"+
    "\0\u2dc6\0\u022e\0\u022e\0\u01b2\0\u0cd6\0\u01b2\0\u2e04\0\u2e42"+
    "\0\u2e80\0\u2ebe\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u022e\0\u2ff4"+
    "\0\u3032\0\u3070\0\u30ae\0\u022e\0\u30ec\0\u312a\0\u022e\0\u022e"+
    "\0\u3168\0\u022e\0\u31a6\0\u31e4\0\u022e\0\u3222\0\u022e\0\u3260"+
    "\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412\0\u3450"+
    "\0\u022e\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u022e\0\u35c4"+
    "\0\u3602\0\u3640\0\u367e\0\u022e\0\u36bc\0\u022e\0\u36fa\0\u022e"+
    "\0\u022e\0\u022e\0\u3738\0\u3776\0\u022e\0\u022e\0\u37b4\0\u022e"+
    "\0\u37f2\0\u3830\0\u386e\0\u01b2\0\u38ac\0\u38ea\0\u3928\0\u022e"+
    "\0\u022e\0\u3966\0\u022e\0\u39a4\0\u39e2\0\u022e\0\u3a20\0\u3a5e"+
    "\0\u3a9c\0\u022e\0\u022e\0\u3ada\0\u3b18\0\u022e\0\u022e\0\u022e"+
    "\0\u022e\0\u022e\0\u3b56\0\u3b94\0\u348e\0\u3548\0\u022e\0\u3bd2"+
    "\0\u022e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\1\14\1\13\1\15\1\16"+
    "\1\17\1\20\1\10\1\21\1\12\1\22\1\23\2\12"+
    "\1\24\1\12\1\25\1\12\1\26\1\27\1\30\1\31"+
    "\1\32\1\12\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\12\1\42\1\43\1\12\1\44\1\45\1\46"+
    "\1\47\1\12\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\12\73\1\74\1\75"+
    "\1\76\73\73\1\77\1\100\1\76\61\73\11\101\1\75"+
    "\1\74\1\101\1\76\72\101\1\102\1\77\1\101\1\76"+
    "\61\101\2\0\1\103\5\0\1\103\6\0\6\103\3\0"+
    "\5\103\1\104\15\103\24\0\1\11\1\12\1\13\1\14"+
    "\1\13\1\15\1\16\1\17\1\20\1\0\1\21\1\12"+
    "\1\105\1\23\2\12\1\24\1\12\1\25\1\12\1\26"+
    "\1\27\1\106\1\31\1\32\1\12\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\12\1\42\1\43\1\12"+
    "\1\44\1\45\1\46\1\47\1\12\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\77\0\1\11\14\0\1\11\4\0\2\107\1\0\1\110"+
    "\50\0\2\12\5\0\1\12\3\0\1\12\1\0\7\12"+
    "\3\0\23\12\26\0\1\13\1\0\1\13\74\0\1\111"+
    "\1\0\1\112\52\0\1\113\75\0\1\114\25\0\1\115"+
    "\1\0\1\116\63\0\2\12\5\0\1\12\1\115\1\0"+
    "\1\116\1\12\1\0\5\12\1\117\1\12\3\0\23\12"+
    "\34\0\1\120\77\0\1\121\63\0\1\11\14\0\1\11"+
    "\2\122\2\0\2\107\1\0\1\110\50\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\1\12\1\123"+
    "\5\12\1\124\1\12\1\125\11\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\1\12\1\126\5\12\3\0"+
    "\14\12\1\127\6\12\50\0\1\130\33\0\1\131\15\0"+
    "\1\132\14\0\1\132\60\0\2\12\5\0\1\133\3\0"+
    "\1\12\1\0\7\12\3\0\23\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\1\134\3\12"+
    "\1\135\16\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\1\12\1\136\5\12\1\137\4\12"+
    "\1\140\6\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\5\12\1\141\1\12\3\0\5\12\1\142\1\143"+
    "\1\144\2\12\1\145\3\12\1\146\4\12\24\0\2\12"+
    "\5\0\1\147\3\0\1\12\1\0\7\12\3\0\6\12"+
    "\1\150\6\12\1\151\5\12\24\0\2\12\5\0\1\12"+
    "\3\0\1\12\1\0\7\12\3\0\11\12\1\152\11\12"+
    "\24\0\2\12\5\0\1\12\3\0\1\12\1\0\3\12"+
    "\1\153\3\12\3\0\10\12\1\154\6\12\1\155\3\12"+
    "\24\0\2\12\5\0\1\12\3\0\1\12\1\0\5\12"+
    "\1\156\1\12\3\0\1\12\1\157\10\12\1\160\10\12"+
    "\24\0\2\12\5\0\1\12\3\0\1\12\1\0\3\12"+
    "\1\161\3\12\3\0\4\12\1\162\3\12\1\163\11\12"+
    "\1\164\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\5\12\1\165\1\12\3\0\7\12\1\166\13\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\11\12\1\167\11\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\6\12\1\170\2\12\1\171"+
    "\11\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\1\12\1\172\21\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\1\12\1\173"+
    "\21\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\5\12\1\174\1\12\3\0\23\12\103\0\1\175\1\176"+
    "\75\0\1\177\3\0\1\200\14\0\1\201\152\0\1\202"+
    "\75\0\1\203\75\0\1\204\3\0\1\205\71\0\1\206"+
    "\6\0\1\207\66\0\1\210\10\0\1\211\64\0\1\212"+
    "\75\0\1\213\12\0\1\214\1\0\12\73\3\0\61\73"+
    "\5\77\1\0\70\77\2\0\1\215\5\0\1\215\4\0"+
    "\1\216\1\0\6\215\3\0\23\215\36\0\1\217\62\0"+
    "\11\101\2\0\1\101\1\0\61\101\11\0\1\220\65\0"+
    "\2\103\5\0\1\103\5\0\7\103\3\0\23\103\24\0"+
    "\2\103\5\0\1\103\5\0\7\103\3\0\6\103\1\221"+
    "\14\103\24\0\1\222\14\0\1\222\6\0\1\222\32\0"+
    "\1\222\15\0\4\223\1\224\1\0\70\223\6\225\1\226"+
    "\67\225\5\227\1\0\3\227\1\230\1\231\63\227\5\232"+
    "\1\0\4\232\1\233\1\234\62\232\1\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\4\12\1\235"+
    "\1\236\15\12\34\0\1\237\77\0\1\240\63\0\1\122"+
    "\14\0\1\122\2\0\4\122\3\0\2\122\1\0\1\122"+
    "\7\0\1\122\33\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\3\12\1\241\10\12\1\242\6\12"+
    "\24\0\2\12\5\0\1\243\3\0\1\12\1\0\7\12"+
    "\3\0\23\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\10\12\1\244\12\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\5\12"+
    "\1\245\11\12\1\246\3\12\24\0\2\12\5\0\1\12"+
    "\3\0\1\12\1\0\7\12\3\0\4\12\1\247\16\12"+
    "\24\0\1\132\14\0\1\132\4\0\2\107\52\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\5\12\1\250\1\12"+
    "\3\0\23\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\4\12\1\251\16\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\4\12"+
    "\1\252\16\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\4\12\1\253\1\254\15\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\10\12\1\255\12\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\1\12\1\256\21\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\5\12\1\257\15\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\1\12\1\260\21\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\7\12\1\261\13\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\12\12\1\262\10\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\17\12\1\263\3\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\11\12\1\264\11\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\12\12\1\265\2\12\1\266\5\12\24\0\2\12\5\0"+
    "\1\267\3\0\1\12\1\0\7\12\3\0\11\12\1\270"+
    "\11\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\17\12\1\271\3\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\13\12\1\272"+
    "\7\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\5\12\1\273\1\12\3\0\23\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\16\12\1\274"+
    "\2\12\1\275\1\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\5\12\1\276\15\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\14\12\1\277\6\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\5\12\1\300\15\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\17\12\1\301\3\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\3\12\1\302\3\12\3\0\23\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\1\303\22\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\11\12\1\304\11\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\5\12"+
    "\1\305\15\12\24\0\2\12\5\0\1\306\3\0\1\12"+
    "\1\0\7\12\3\0\23\12\24\0\2\12\5\0\1\307"+
    "\3\0\1\12\1\0\7\12\3\0\23\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\5\12"+
    "\1\310\15\12\104\0\1\311\75\0\1\312\75\0\1\313"+
    "\75\0\1\314\3\0\1\315\71\0\1\316\15\0\2\215"+
    "\5\0\1\215\5\0\7\215\3\0\23\215\36\0\1\75"+
    "\73\0\1\75\65\0\2\103\5\0\1\103\5\0\7\103"+
    "\3\0\11\103\1\317\11\103\24\0\1\222\14\0\1\222"+
    "\57\0\5\223\1\0\70\223\5\224\1\0\70\224\6\225"+
    "\1\320\67\225\4\321\1\322\1\321\1\226\67\321\5\227"+
    "\1\0\3\227\1\323\1\231\63\227\11\0\1\324\64\0"+
    "\76\227\5\232\1\0\4\232\1\233\1\323\160\232\13\0"+
    "\1\325\63\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\7\12\1\326\13\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\12\12\1\327"+
    "\10\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\5\12\1\330\15\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\4\12\1\331"+
    "\16\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\1\12\1\332\21\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\5\12\1\333\1\12\3\0"+
    "\23\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\7\12\1\334\13\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\5\12\1\335\1\12\3\0"+
    "\23\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\1\12\1\336\21\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\5\12\1\337"+
    "\15\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\5\12\1\340\1\12\3\0\23\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\5\12\1\341\1\12\3\0"+
    "\23\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\3\12\1\342\17\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\4\12\1\343"+
    "\1\344\15\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\4\12\1\345\16\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\5\12"+
    "\1\346\15\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\16\12\1\347\4\12\24\0\2\12"+
    "\5\0\1\350\3\0\1\12\1\0\7\12\3\0\23\12"+
    "\24\0\2\12\5\0\1\12\3\0\1\12\1\0\5\12"+
    "\1\351\1\12\3\0\23\12\24\0\2\12\5\0\1\12"+
    "\3\0\1\12\1\0\7\12\3\0\5\12\1\352\15\12"+
    "\24\0\2\12\5\0\1\12\3\0\1\12\1\0\5\12"+
    "\1\353\1\12\3\0\23\12\24\0\2\12\5\0\1\12"+
    "\3\0\1\12\1\0\7\12\3\0\7\12\1\354\13\12"+
    "\24\0\2\12\5\0\1\12\3\0\1\12\1\0\7\12"+
    "\3\0\4\12\1\355\16\12\24\0\2\12\5\0\1\12"+
    "\3\0\1\12\1\0\5\12\1\356\1\12\3\0\23\12"+
    "\24\0\2\12\5\0\1\12\3\0\1\12\1\0\5\12"+
    "\1\357\1\12\3\0\23\12\24\0\2\12\5\0\1\360"+
    "\3\0\1\12\1\0\7\12\3\0\23\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\1\12"+
    "\1\361\21\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\11\12\1\362\11\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\14\12"+
    "\1\363\6\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\5\12\1\364\1\12\3\0\23\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\7\12"+
    "\1\365\4\12\1\366\6\12\24\0\2\12\5\0\1\12"+
    "\3\0\1\12\1\0\7\12\3\0\1\12\1\367\21\12"+
    "\24\0\2\12\5\0\1\370\3\0\1\12\1\0\7\12"+
    "\3\0\23\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\14\12\1\371\6\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\6\12"+
    "\1\372\14\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\5\12\1\373\15\12\104\0\1\374"+
    "\15\0\2\103\5\0\1\103\5\0\7\103\3\0\4\103"+
    "\1\375\16\103\23\0\4\225\1\376\1\225\1\320\67\225"+
    "\6\321\1\377\67\321\11\324\1\u0100\1\u0101\63\324\12\325"+
    "\1\u0102\1\u0103\62\325\1\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\12\12\1\u0104\10\12\24\0"+
    "\2\12\5\0\1\u0105\3\0\1\12\1\0\7\12\3\0"+
    "\23\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\7\12\1\u0106\13\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\5\12\1\u0107\1\12\3\0"+
    "\23\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\14\12\1\u0108\6\12\24\0\2\12\5\0"+
    "\1\u0109\3\0\1\12\1\0\7\12\3\0\10\12\1\u010a"+
    "\12\12\24\0\2\12\5\0\1\u010b\3\0\1\12\1\0"+
    "\7\12\3\0\23\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\2\12\1\u010c\20\12\24\0"+
    "\2\12\5\0\1\u010d\3\0\1\12\1\0\7\12\3\0"+
    "\23\12\24\0\2\12\5\0\1\u010e\3\0\1\12\1\0"+
    "\7\12\3\0\23\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\6\12\1\u010f\14\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\5\12\1\u0110\15\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\11\12\1\u0111\11\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\4\12\1\u0112\16\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\11\12\1\u0113\11\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\3\12\1\u0114\17\12\24\0\2\12\5\0\1\u0115\3\0"+
    "\1\12\1\0\7\12\3\0\23\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\3\12\1\u0116"+
    "\17\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\16\12\1\u0117\4\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\13\12\1\u0118"+
    "\7\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\1\12\1\u0119\21\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\5\12\1\u011a"+
    "\15\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\20\12\1\u011b\2\12\24\0\2\12\5\0"+
    "\1\u011c\3\0\1\12\1\0\7\12\3\0\23\12\24\0"+
    "\2\12\5\0\1\u011d\3\0\1\12\1\0\7\12\3\0"+
    "\23\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\5\12\1\u011e\1\12\3\0\23\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\7\12\3\0\12\12\1\u011f"+
    "\10\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\1\12\1\u0120\21\12\24\0\2\12\5\0"+
    "\1\12\3\0\1\12\1\0\5\12\1\u0121\1\12\3\0"+
    "\23\12\23\0\4\321\1\322\1\321\1\377\67\321\11\324"+
    "\1\u0122\1\u0123\161\324\110\325\1\u0124\1\u0125\62\325\1\0"+
    "\2\12\5\0\1\u0126\3\0\1\12\1\0\7\12\3\0"+
    "\23\12\24\0\2\12\5\0\1\12\3\0\1\12\1\0"+
    "\7\12\3\0\10\12\1\u0127\12\12\24\0\2\12\5\0"+
    "\1\u0128\3\0\1\12\1\0\7\12\3\0\23\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\14\12\1\u0129\6\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\10\12\1\u012a\12\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\13\12\1\u012b\7\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\5\12\1\u012c\15\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\1\12\1\u012d\21\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\5\12\1\u012e\15\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\10\12\1\u012f\12\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\3\12\1\u0130\17\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\5\12\1\u0131"+
    "\1\12\3\0\23\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\6\12\1\u0132\14\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\5\12\1\u0133"+
    "\1\12\3\0\23\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\5\12\1\u0134\15\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\5\12\1\u0135"+
    "\1\12\3\0\23\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\5\12\1\u0136\1\12\3\0\23\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\3\12\1\u0137"+
    "\3\12\3\0\23\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\5\12\1\u0138\15\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\22\12\1\u0139\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\14\12\1\u013a\6\12\24\0\2\12"+
    "\5\0\1\u013b\3\0\1\12\1\0\7\12\3\0\23\12"+
    "\23\0\11\324\1\u013c\1\u0123\74\324\1\u013d\1\u0123\63\324"+
    "\12\325\1\u0124\1\u013e\74\325\1\u0124\1\u013c\62\325\1\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\3\12\1\u013f\17\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\15\12\1\u0140\5\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\15\12\1\u0141\5\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\1\12\1\u0142\21\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\4\12\1\u0143\16\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\3\12\1\u0144\17\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\12\12\1\u0145\10\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\3\12\1\u0146\3\12\3\0\23\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\7\12\1\u0147\13\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\1\12\1\u0148\21\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\5\12\1\u0149"+
    "\1\12\3\0\23\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\5\12\1\u014a\15\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\15\12\1\u014b\5\12\23\0\11\324\1\u014c\1\u0123\63\324"+
    "\12\325\1\u0124\1\u014d\62\325\1\0\2\12\5\0\1\12"+
    "\3\0\1\12\1\0\5\12\1\u014e\1\12\3\0\23\12"+
    "\24\0\2\12\5\0\1\12\3\0\1\12\1\0\7\12"+
    "\3\0\14\12\1\u014f\6\12\24\0\2\12\5\0\1\12"+
    "\3\0\1\12\1\0\7\12\3\0\5\12\1\u0150\15\12"+
    "\24\0\2\12\5\0\1\12\3\0\1\12\1\0\5\12"+
    "\1\u0151\1\12\3\0\23\12\24\0\2\12\5\0\1\u0152"+
    "\3\0\1\12\1\0\7\12\3\0\23\12\24\0\2\12"+
    "\5\0\1\12\3\0\1\12\1\0\7\12\3\0\3\12"+
    "\1\u0153\17\12\24\0\2\12\5\0\1\12\3\0\1\12"+
    "\1\0\7\12\3\0\10\12\1\u0154\12\12\23\0\11\324"+
    "\1\u0155\1\u0123\63\324\12\325\1\u0124\1\u0156\62\325\1\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\5\12\1\u0157"+
    "\1\12\3\0\23\12\24\0\2\12\5\0\1\12\3\0"+
    "\1\12\1\0\7\12\3\0\5\12\1\u0158\15\12\24\0"+
    "\2\12\5\0\1\12\3\0\1\12\1\0\7\12\3\0"+
    "\4\12\1\u0159\16\12\23\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[15376];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\11\1\1\11\5\1\1\11\17\1\5\11"+
    "\6\1\2\11\1\1\1\11\3\1\1\11\1\1\1\0"+
    "\1\11\1\1\1\11\5\1\2\11\1\1\1\0\2\1"+
    "\2\11\3\1\2\0\6\1\2\11\43\1\2\11\1\1"+
    "\1\11\1\1\1\11\1\1\1\11\1\0\1\11\1\1"+
    "\5\11\1\1\1\11\2\0\16\1\2\11\50\1\4\11"+
    "\1\0\1\11\1\1\1\0\1\1\2\11\50\1\1\11"+
    "\1\1\1\11\5\0\36\1\1\0\2\1\1\0\26\1"+
    "\1\11\17\1\2\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[345];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private static final class State {
        final int lBraceCount;
        final int state;

        public State(int state, int lBraceCount) {
            this.state = state;
            this.lBraceCount = lBraceCount;
        }

        @Override
        public String toString() {
            return "yystate = " + state + (lBraceCount == 0 ? "" : "lBraceCount = " + lBraceCount);
        }
    }

    private final Stack<State> states = new Stack<State>();
    private int lBraceCount;

    private int commentStart;
    private int commentDepth;

    private void pushState(int state) {
        states.push(new State(yystate(), lBraceCount));
        lBraceCount = 0;
        yybegin(state);
    }

    private void popState() {
        State state = states.pop();
        lBraceCount = state.lBraceCount;
        yybegin(state.state);
    }

    public _DartLexer() {
      this((java.io.Reader)null);
    }


  _DartLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _DartLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 150) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL.charAt(zzCurrentPosL++);
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL.charAt(zzCurrentPosL++);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { return IDENTIFIER;
          }
        case 126: break;
        case 74: 
          { return TRY;
          }
        case 127: break;
        case 83: 
          { return RAW_TRIPLE_QUOTED_STRING;
          }
        case 128: break;
        case 16: 
          { return LPAREN;
          }
        case 129: break;
        case 92: 
          { return PART;
          }
        case 130: break;
        case 43: 
          { return PLUS_PLUS;
          }
        case 131: break;
        case 31: 
          { return AND;
          }
        case 132: break;
        case 103: 
          { return WHILE;
          }
        case 133: break;
        case 99: 
          { return CONST;
          }
        case 134: break;
        case 87: 
          { return TRUE;
          }
        case 135: break;
        case 55: 
          { return EXPRESSION_BODY_DEF;
          }
        case 136: break;
        case 56: 
          { return INT_DIV;
          }
        case 137: break;
        case 15: 
          { return RBRACKET;
          }
        case 138: break;
        case 107: 
          { return STATIC;
          }
        case 139: break;
        case 2: 
          { return NUMBER;
          }
        case 140: break;
        case 26: 
          { return COLON;
          }
        case 141: break;
        case 59: 
          { return GT_EQ;
          }
        case 142: break;
        case 97: 
          { return BREAK;
          }
        case 143: break;
        case 105: 
          { return EXPORT;
          }
        case 144: break;
        case 20: 
          { return EQ;
          }
        case 145: break;
        case 35: 
          { popState(); return IDENTIFIER;
          }
        case 146: break;
        case 120: 
          { return EXTERNAL;
          }
        case 147: break;
        case 71: 
          { pushState(THREE_QUO_STRING); return OPEN_QUOTE;
          }
        case 148: break;
        case 116: 
          { return TYPEDEF;
          }
        case 149: break;
        case 118: 
          { return LIBRARY;
          }
        case 150: break;
        case 21: 
          { return BIN_NOT;
          }
        case 151: break;
        case 73: 
          { return SET;
          }
        case 152: break;
        case 61: 
          { return LT_LT;
          }
        case 153: break;
        case 115: 
          { return EXTENDS;
          }
        case 154: break;
        case 40: 
          { return DIV_EQ;
          }
        case 155: break;
        case 68: 
          { pushState(LONG_TEMPLATE_ENTRY); return LONG_TEMPLATE_ENTRY_START;
          }
        case 156: break;
        case 104: 
          { return RETURN;
          }
        case 157: break;
        case 86: 
          { return SHOW;
          }
        case 158: break;
        case 39: 
          { return MULTI_LINE_COMMENT;
          }
        case 159: break;
        case 101: 
          { return SUPER;
          }
        case 160: break;
        case 106: 
          { return ASSERT;
          }
        case 161: break;
        case 63: 
          { return OR_OR;
          }
        case 162: break;
        case 14: 
          { return LBRACKET;
          }
        case 163: break;
        case 94: 
          { popState(); return THIS;
          }
        case 164: break;
        case 18: 
          { return SEMICOLON;
          }
        case 165: break;
        case 98: 
          { return CATCH;
          }
        case 166: break;
        case 22: 
          { return REM;
          }
        case 167: break;
        case 25: 
          { return COMMA;
          }
        case 168: break;
        case 47: 
          { return ON;
          }
        case 169: break;
        case 110: 
          { return NEGATE;
          }
        case 170: break;
        case 36: 
          { lBraceCount++; return LBRACE;
          }
        case 171: break;
        case 41: 
          { return MUL_EQ;
          }
        case 172: break;
        case 30: 
          { return XOR;
          }
        case 173: break;
        case 108: 
          { return SOURCE;
          }
        case 174: break;
        case 5: 
          { return DIV;
          }
        case 175: break;
        case 64: 
          { return XOR_EQ;
          }
        case 176: break;
        case 93: 
          { return GT_GT_GT_EQ;
          }
        case 177: break;
        case 54: 
          { return EQ_EQ;
          }
        case 178: break;
        case 52: 
          { return MINUS_MINUS;
          }
        case 179: break;
        case 11: 
          { return PLUS;
          }
        case 180: break;
        case 111: 
          { return NATIVE;
          }
        case 181: break;
        case 90: 
          { return NULL;
          }
        case 182: break;
        case 27: 
          { return LT;
          }
        case 183: break;
        case 109: 
          { return SWITCH;
          }
        case 184: break;
        case 100: 
          { return CLASS;
          }
        case 185: break;
        case 32: 
          { return HASH;
          }
        case 186: break;
        case 12: 
          { return DOT;
          }
        case 187: break;
        case 117: 
          { return DEFAULT;
          }
        case 188: break;
        case 51: 
          { return DO;
          }
        case 189: break;
        case 50: 
          { return IN;
          }
        case 190: break;
        case 96: 
          { return FINAL;
          }
        case 191: break;
        case 95: 
          { return FALSE;
          }
        case 192: break;
        case 58: 
          { return NEQ;
          }
        case 193: break;
        case 13: 
          { return RBRACE;
          }
        case 194: break;
        case 66: 
          { return AND_AND;
          }
        case 195: break;
        case 34: 
          { popState(); return CLOSING_QUOTE;
          }
        case 196: break;
        case 75: 
          { return NEW;
          }
        case 197: break;
        case 37: 
          { if (lBraceCount == 0) {
                                             popState();
                                             return LONG_TEMPLATE_ENTRY_END;
                                           }
                                           lBraceCount--;
                                           return RBRACE;
          }
        case 198: break;
        case 24: 
          { return GT;
          }
        case 199: break;
        case 46: 
          { return OF;
          }
        case 200: break;
        case 78: 
          { return EQ_EQ_EQ;
          }
        case 201: break;
        case 89: 
          { return HIDE;
          }
        case 202: break;
        case 122: 
          { return CONTINUE;
          }
        case 203: break;
        case 33: 
          { return REGULAR_STRING_PART;
          }
        case 204: break;
        case 29: 
          { return OR;
          }
        case 205: break;
        case 81: 
          { return GT_GT_EQ;
          }
        case 206: break;
        case 49: 
          { return IS;
          }
        case 207: break;
        case 10: 
          { return LBRACE;
          }
        case 208: break;
        case 76: 
          { return VAR;
          }
        case 209: break;
        case 1: 
          { yybegin(YYINITIAL); return BAD_CHARACTER;
          }
        case 210: break;
        case 124: 
          { return INTERFACE;
          }
        case 211: break;
        case 44: 
          { return PLUS_EQ;
          }
        case 212: break;
        case 80: 
          { return NEQ_EQ;
          }
        case 213: break;
        case 62: 
          { return OR_EQ;
          }
        case 214: break;
        case 23: 
          { return NOT;
          }
        case 215: break;
        case 57: 
          { return REM_EQ;
          }
        case 216: break;
        case 112: 
          { return IMPORT;
          }
        case 217: break;
        case 4: 
          { return WHITE_SPACE;
          }
        case 218: break;
        case 123: 
          { return OPERATOR;
          }
        case 219: break;
        case 79: 
          { return INT_DIV_EQ;
          }
        case 220: break;
        case 53: 
          { return MINUS_EQ;
          }
        case 221: break;
        case 119: 
          { return RESOURCE;
          }
        case 222: break;
        case 7: 
          { return AT;
          }
        case 223: break;
        case 9: 
          { pushState(QUO_STRING); return OPEN_QUOTE;
          }
        case 224: break;
        case 102: 
          { return THROW;
          }
        case 225: break;
        case 84: 
          { return ELSE;
          }
        case 226: break;
        case 48: 
          { return IF;
          }
        case 227: break;
        case 91: 
          { return WITH;
          }
        case 228: break;
        case 42: 
          { return RAW_SINGLE_QUOTED_STRING;
          }
        case 229: break;
        case 6: 
          { return MUL;
          }
        case 230: break;
        case 38: 
          { return SINGLE_LINE_COMMENT;
          }
        case 231: break;
        case 114: 
          { return FINALLY;
          }
        case 232: break;
        case 69: 
          { return DOC_COMMENT;
          }
        case 233: break;
        case 125: 
          { return IMPLEMENTS;
          }
        case 234: break;
        case 19: 
          { return MINUS;
          }
        case 235: break;
        case 70: 
          { pushState(THREE_APOS_STRING); return OPEN_QUOTE;
          }
        case 236: break;
        case 121: 
          { return ABSTRACT;
          }
        case 237: break;
        case 72: 
          { return FOR;
          }
        case 238: break;
        case 85: 
          { return CASE;
          }
        case 239: break;
        case 77: 
          { return GET;
          }
        case 240: break;
        case 17: 
          { return RPAREN;
          }
        case 241: break;
        case 82: 
          { return LT_LT_EQ;
          }
        case 242: break;
        case 28: 
          { return QUEST;
          }
        case 243: break;
        case 65: 
          { return AND_EQ;
          }
        case 244: break;
        case 88: 
          { return THIS;
          }
        case 245: break;
        case 60: 
          { return LT_EQ;
          }
        case 246: break;
        case 113: 
          { return FACTORY;
          }
        case 247: break;
        case 45: 
          { return AS;
          }
        case 248: break;
        case 8: 
          { pushState(APOS_STRING); return OPEN_QUOTE;
          }
        case 249: break;
        case 67: 
          { pushState(SHORT_TEMPLATE_ENTRY);
                                                                  yypushback(yylength() - 1);
                                                                  return SHORT_TEMPLATE_ENTRY_START;
          }
        case 250: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
